[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Payment Entry",
  "enabled": 1,
  "modified": "2024-01-24 17:58:09.554251",
  "module": "Quantbit Finance Customization",
  "name": "Payment Entry-Customization",
  "script": "frappe.ui.form.on('Payment Entry', {\n    party: function(frm) {\n        frm.clear_table(\"custom_payment_preferences\")\n        frm.clear_table(\"deductions\")\n        frm.doc.custom_discount_rate=null\n        frm.refresh_field('custom_discount_rate')\n        frappe.call({\n            method: \"quantbit_finance_customization.quantbit_finance_customization.payment_entry_customization.get_payment_references\",\n            args:{\n                party:frm.doc.party,\n                party_type:frm.doc.party_type\n                \n            },\n            callback: function(response) {\n                if (!response.exc) {\n                    var reference_list =[];\n                    reference_list=response.message;\n                    for (var i = 0; i < reference_list.length; i++) {\n                        var a = frappe.model.add_child(frm.doc, \"PE Payment Preferences\", \"custom_payment_preferences\");\n                        a.reference_id = reference_list[i][\"name\"];\n                        a.outstanding_amount= reference_list[i][\"outstanding_amount\"];\n                        a.grand_total= reference_list[i][\"grand_total\"];\n                        a.type= reference_list[i][\"doctype\"];\n                        a.reference_document=reference_list[i][\"ref_doctype\"];\n                        if(a.type==\"Journal Entry\"){\n                            a.total=reference_list[i][\"grand_total\"];\n                        }\n                        else\n                        {\n                            a.total=reference_list[i][\"total\"];\n                        }\n                        if(reference_list[i][\"base_net_total\"])\n                        {\n                            a.tds_apply_amount=reference_list[i][\"base_net_total\"];\n                        }\n                        if(reference_list[i][\"taxes_and_charges_deducted\"])\n                        {\n                            a.pi_discount_apply_amount=reference_list[i][\"taxes_and_charges_deducted\"];\n                        }\n                    }\n                    refresh_field(\"custom_payment_preferences\");\n                    get_sum(frm);\n                }\n            }\n        });\n    },\n    custom_discount_rate: function(frm) {\n        $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n            if (row.check) {\n                if(row.grand_total>0){\n                   \n                   if(frm.doc.custom_discount_on_base_total)\n                   {\n                        row.discount_amount = frm.doc.custom_discount_rate * row.total / 100;\n                        row.allocated_amount = row.grand_total-(row.discount_amount+row.deduction_amount);\n                        row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                   }\n                   else{\n                        if(row.pi_discount_apply_amount>0)\n                        {\n                            var total=row.grand_total+row.pi_discount_apply_amount\n                            row.discount_amount = frm.doc.custom_discount_rate * total / 100;\n                            row.deduction_amount = row.pi_discount_apply_amount\n                            row.allocated_amount = total-(row.discount_amount+row.deduction_amount);\n                            row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                            \n                        }\n                        else\n                        {\n                            row.discount_amount = frm.doc.custom_discount_rate * row.grand_total / 100;\n                            row.allocated_amount = row.grand_total-(row.discount_amount+row.deduction_amount);\n                            row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                        }\n                   }   \n                }\n            }\n        });\n        frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    },\n    \n    custom_deduction_rate: function(frm) {\n        $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n            if (row.check) {\n                if(row.tds_apply_amount>0){\n                    row.deduction_amount = frm.doc.custom_deduction_rate * row.tds_apply_amount/100;\n                    row.allocated_amount =row.grand_total-(row.discount_amount+row.deduction_amount)\n                    row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                }\n            }\n        });\n        frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    },\n    custom_add_references: function(frm){\n        $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n            if (row.check) {\n                if(row.paidreceipt_amount>row.outstanding_amount){\n                    frappe.msgprint(__('Row {0}: Allocated Amount cannot be greater than outstanding amount.', [row.idx]));\n                }\n            }\n        });\n        frm.clear_table(\"references\")\n        frm.refresh_field('references');\n        $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n            if (row.check) {\n                if(row.outstanding_amount)\n                {\n                    var b = frappe.model.add_child(cur_frm.doc, \"Payment Entry Reference\", \"references\");\n                    b.reference_doctype = row.type;\n                    b.reference_name=row.reference_id\n                    b.total_amount=row.grand_total\n                    b.outstanding_amount=row.outstanding_amount\n                    b.allocated_amount=row.paidreceipt_amount\n                }\n            }\n        });\n        frm.refresh_field('references');\n        if(frm.doc.custom_total_allocated_amount)\n        {   \n            frm.doc.paid_amount=frm.doc.custom_total_allocated_amount\n            frm.refresh_field('paid_amount');\n        }\n        frm.clear_table(\"deductions\")\n        if(frm.doc.custom_total_discount_amount)\n        {\n            var c = frappe.model.add_child(cur_frm.doc, \"Payment Entry Deduction\", \"deductions\");\n            c.amount =frm.doc.party_type==\"Supplier\" ? -frm.doc.custom_total_discount_amount: frm.doc.custom_total_discount_amount;\n            frappe.model.get_value('Finance Setting', {'name': 'Finance Setting'}, 'default_discount_account',\n            function(d) {\n                c.account = d.default_discount_account;\n            })\n            frm.refresh_field('deductions');\n        }\n        if(frm.doc.custom_total_deduction_amount)\n        {\n            if(frm.doc.party_type!=\"Supplier\")\n            {\n                var e=frappe.model.add_child(cur_frm.doc, \"Payment Entry Deduction\", \"deductions\");\n                e.amount = frm.doc.custom_total_deduction_amount;\n                frappe.model.get_value('Finance Setting', {'name': 'Finance Setting'}, 'default_deduction_account',\n                function(d) {\n                    e.account = d.default_deduction_account;\n                })\n                frm.refresh_field('deductions');\n            }\n            \n        }\n        \n    },\n    custom_discount_on_base_total: function(frm) {\n        $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n            if (row.check) {\n                if(row.grand_total>0){\n                   \n                   if(frm.doc.custom_discount_on_base_total)\n                   {\n                        row.discount_amount = frm.doc.custom_discount_rate * row.total / 100;\n                        row.allocated_amount = row.grand_total-(row.discount_amount+row.deduction_amount);\n                        row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                   }\n                   else{\n                        if(row.pi_discount_apply_amount>0)\n                        {\n                            var total=row.grand_total+row.pi_discount_apply_amount\n                            row.discount_amount = frm.doc.custom_discount_rate * total / 100;\n                            row.deduction_amount = row.pi_discount_apply_amount\n                            row.allocated_amount = total-(row.discount_amount+row.deduction_amount);\n                            row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                            \n                        }\n                        else\n                        {\n                            row.discount_amount = frm.doc.custom_discount_rate * row.grand_total / 100;\n                            row.allocated_amount = row.grand_total-(row.discount_amount+row.deduction_amount);\n                            row.paidreceipt_amount=row.allocated_amount+row.discount_amount+row.deduction_amount\n                        }\n                   }   \n                }\n            }\n        });\n        frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    },\n});\n\nfunction get_sum(frm){\n    var discount=0;\n    var grand=0;\n    var allocated=0;\n    var paidreceipt_amt=0;\n    var deduction_amt=0;\n    \n    $.each(frm.doc.custom_payment_preferences || [], function(i, row) {\n        if(row.check){\n            discount=discount+row.discount_amount ;\n            allocated=allocated+row.allocated_amount ;\n            grand=grand+row.grand_total;\n            paidreceipt_amt=paidreceipt_amt+row.paidreceipt_amount;\n            deduction_amt=deduction_amt+row.deduction_amount;\n        }\n    });\n    frm.doc.custom_total_discount_amount=discount\n    frm.refresh_field('custom_total_discount_amount');\n    frm.doc.custom_grand_total_amount=grand\n    frm.refresh_field('custom_grand_total_amount');\n    frm.doc.custom_total_allocated_amount=allocated\n    frm.refresh_field('custom_total_allocated_amount');\n    frm.doc.custom_total_paidreceipt_amt=paidreceipt_amt\n    frm.refresh_field('custom_total_paidreceipt_amt');\n    frm.doc.custom_total_deduction_amount=deduction_amt\n    frm.refresh_field('custom_total_deduction_amount');\n}\n\n\nfrappe.ui.form.on('PE Payment Preferences', {\n    setup:function(frm){\n        if(frm.doc.party_type!=\"Customer\")\n        {\n            frm.fields_dict['deduction_amount'].toggle(false);\n        }\n        \n    },\n    discount_amount: function(frm,cdt,cdn) {\n    let d = locals[cdt][cdn];\n    if(d.check)\n    {\n        if(frm.doc.custom_discount_on_base_total)\n        {\n            d.allocated_amount = d.grand_total-(d.discount_amount+d.deduction_amount);\n            d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n        }\n        else{\n            if(d.pi_discount_apply_amount>0)\n            {\n                var total=d.grand_total+d.pi_discount_apply_amount\n                d.deduction_amount = d.pi_discount_apply_amount\n                d.allocated_amount=total-(d.discount_amount+d.deduction_amount)\n                d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n            }\n            else\n            {\n                d.allocated_amount=d.grand_total-(d.discount_amount+d.deduction_amount)\n                d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n            }\n        }\n        cur_frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    }\n    },\n    paidreceipt_amount: function(frm,cdt,cdn) {\n    get_sum(frm);\n    },\n    deduction_amount: function(frm,cdt,cdn) {\n    let d = locals[cdt][cdn];\n    if(d.check)\n    {\n        d.allocated_amount=d.grand_total-(d.discount_amount+d.deduction_amount)\n        d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n        cur_frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    }\n    },\n    allocated_amount: function(frm,cdt,cdn) {\n    get_sum(frm);\n    },\n    check: function(frm,cdt,cdn) {\n        let d = locals[cdt][cdn];\n        d.allocated_amount=null\n        d.paidreceipt_amount=null\n        d.discount_amount=null\n        d.deduction_amount=null\n        if(d.discount_amount)\n        {\n             if(d.check)\n            {\n                if(frm.doc.custom_discount_on_base_total)\n                {\n                    d.allocated_amount = d.grand_total-(d.discount_amount+d.deduction_amount);\n                    d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                }\n                else{\n                    if(d.pi_discount_apply_amount>0)\n                    {\n                        var total=d.grand_total+d.pi_discount_apply_amount\n                        d.deduction_amount = d.pi_discount_apply_amount\n                        d.allocated_amount=total-(d.discount_amount+d.deduction_amount)\n                        d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                    }\n                    else\n                    {\n                        d.allocated_amount=d.grand_total-(d.discount_amount+d.deduction_amount)\n                        d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                    }\n                }\n            }\n        }\n        else{\n            if(frm.doc.custom_discount_rate)\n            {\n                if (d.check) {\n                    if(d.grand_total>0){\n                         if(frm.doc.custom_discount_on_base_total)\n                         {\n                            d.discount_amount = frm.doc.custom_discount_rate * d.total / 100;\n                            d.allocated_amount = d.grand_total-(d.discount_amount+d.deduction_amount);\n                            d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                         }\n                         else\n                         {\n                            if(d.pi_discount_apply_amount>0)\n                            {\n                                var total=d.grand_total+d.pi_discount_apply_amount\n                                d.discount_amount = frm.doc.custom_discount_rate * total / 100;\n                                d.deduction_amount = d.pi_discount_apply_amount\n                                d.allocated_amount = total-(d.discount_amount+d.deduction_amount);\n                                d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                            }\n                            else\n                            {\n                                d.discount_amount = frm.doc.custom_discount_rate * d.grand_total / 100;\n                                d.allocated_amount = d.grand_total-(d.discount_amount+d.deduction_amount);\n                                d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                            }\n                         }\n                    }\n                }\n            }\n        }\n        if(frm.doc.custom_deduction_rate)\n        {\n            if(d.check)\n            {\n                if(d.tds_apply_amount>0){\n                        d.deduction_amount = frm.doc.custom_deduction_rate * d.tds_apply_amount/100;\n                        d.allocated_amount =d.grand_total-(d.discount_amount+d.deduction_amount)\n                        d.paidreceipt_amount=d.allocated_amount+d.discount_amount+d.deduction_amount\n                    }\n            }\n        }\n        cur_frm.refresh_field('custom_payment_preferences');\n        get_sum(frm);\n    }\n    \n});\n\n\n\n\n\n",
  "view": "Form"
 }
]